plugins {
	id 'java'
    id 'application'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
    id 'checkstyle'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Reference the domain and persistence subprojects.
    implementation project(':domain')
    implementation project(':persistence')

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    // Also use the Mockito mocking framework to mock simple server functionality.
    testImplementation "org.mockito:mockito-core:2.+"

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    implementation "org.jacoco:org.jacoco.core:0.8.2"
    implementation 'org.json:json:20211205'
}

application {
    // Define the main class for the application.
    mainClassName = 'ip.rijksmuseumquiz.api.ApiApplication'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
}

checkstyle {
    toolVersion '7.8.1'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

if (project.hasProperty('projVersion')) {
  project.version = project.projVersion
} else {
  project.version = '1.0.0'
}
